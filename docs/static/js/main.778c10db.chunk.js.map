{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","Array","isArray","apply","key","call","substr","SlideShow","props","state","activeIndex","maxIndex","slides","jumpToSlide","delay","console","log","Date","setTimeout","nextSlide","currentSlide","this","next","index","slideTimer","setState","className","map","slide","active","src","imageUrl","caption","onClick","event","React","Component","_slides","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,6KCIvCC,G,YAAS,GAAGC,gBAEhB,SAASC,IAGP,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAAMF,UAAUD,GACpB,GAAKG,EAAL,CAEA,IAAIC,SAAiBD,EAErB,GAAgB,WAAZC,GAAoC,WAAZA,EAC1BL,GAAW,IAAMI,OACZ,GAAIE,MAAMC,QAAQH,GACvBJ,GAAW,IAAMD,EAAWS,MAAM,KAAMJ,QACnC,GAAgB,WAAZC,EACT,IAAK,IAAII,KAAOL,EACVP,EAAOa,KAAKN,EAAKK,IAAQL,EAAIK,KAC/BT,GAAW,IAAMS,IAMzB,OAAOT,EAAQW,OAAO,G,IAGlBC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,YAAa,EACbC,SAAW,EAAKH,MAAMI,OAAOd,OAC7Bc,OAAS,EAAKJ,MAAMI,QAEtB,EAAKC,YAAc,EAAKA,YAPP,E,wEAUPC,GAAQ,IAAD,OAEjBC,QAAQC,IAAI,uBAAyBF,EAAQ,IAAO,IAAIG,MAExDC,YAAY,WACVH,QAAQC,IAAI,uBAAyB,IAAIC,MACzC,EAAKE,cACI,IAARL,K,kCAIHC,QAAQC,IAAI,wBAA0B,IAAIC,MAC1C,IAAIG,EAAeC,KAAKZ,MAAMC,YAC1BY,EAAOD,KAAKZ,MAAMC,YAAc,EAC/BU,GAAiBC,KAAKZ,MAAME,SAAW,IAC1CW,EAAO,GAETD,KAAKR,YAAYS,K,kCAGPC,GACVF,KAAKG,WAAYH,KAAKZ,MAAMG,OAAOW,GAAOT,OAC1CO,KAAKI,SAAS,CACZf,YAAaa,M,+BAIP,IAAD,OACP,OACE,yBAAKG,UAAU,aACb,wBAAIA,UAAU,oBAEVL,KAAKb,MAAMI,OAAOe,KAAI,SAACC,EAAOL,GAAR,OACpB,wBAAIG,UAAYhC,EAAW,CAAEmC,OAAQN,GAAS,EAAKd,MAAMC,eACvD,gCACE,yBAAKoB,IAAMF,EAAMG,WACfH,EAAMI,QAAU,oCAAcJ,EAAMI,SAAyB,WAMzE,wBAAIN,UAAU,kBAEVL,KAAKb,MAAMI,OAAOe,KAAI,SAACC,EAAOL,GAAR,OACpB,wBAAIG,UAAaH,GAAS,EAAKd,MAAMC,YAAe,SAAU,IAC5D,uBAAGuB,QAAU,SAACC,GAAD,OAAU,EAAKrB,YAAYU,KAAWA,EAAQ,a,GAzDnDY,IAAMC,WAmE1BC,EAAU,CAAC,CACbN,SAAU,mDACVC,QAAS,0BACTlB,MAAQ,GACP,CACDiB,SAAU,4EACVC,QAAS,oBACTlB,MAAO,IASMwB,E,iLAJX,OAAO,kBAAC,EAAD,CAAW1B,OAASyB,Q,GAFbF,IAAMC,WChGJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.778c10db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nvar hasOwn = {}.hasOwnProperty;\n\nfunction classNames () {\n  var classes = '';\n\n  for (var i = 0; i < arguments.length; i++) {\n    var arg = arguments[i];\n    if (!arg) continue;\n\n    var argType = typeof arg;\n\n    if (argType === 'string' || argType === 'number') {\n      classes += ' ' + arg;\n    } else if (Array.isArray(arg)) {\n      classes += ' ' + classNames.apply(null, arg);\n    } else if (argType === 'object') {\n      for (var key in arg) {\n        if (hasOwn.call(arg, key) && arg[key]) {\n          classes += ' ' + key;\n        }\n      }\n    }\n  }\n\n  return classes.substr(1);\n}\n\nclass SlideShow extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { \n      activeIndex: 0,\n      maxIndex : this.props.slides.length,\n      slides : this.props.slides\n    };\n    this.jumpToSlide = this.jumpToSlide;\n  }\n\n  slideTimer (delay) {\n\n    console.log('sliderTimer started ' + delay + ' '  + new Date () )\n\n    setTimeout( () => {\n      console.log('sliderTimer Expired ' + new Date ())\n      this.nextSlide();\n    }, delay * 1000)\n  }\n\n  nextSlide () {\n    console.log('next slide triggered ' + new Date ())\n    var currentSlide = this.state.activeIndex;\n    var next = this.state.activeIndex + 1;\n    if ( currentSlide == (this.state.maxIndex - 1)) {\n      next = 0;\n    }      \n    this.jumpToSlide(next)    \n  }\n\n  jumpToSlide(index) {\n    this.slideTimer (this.state.slides[index].delay) \n    this.setState({ \n      activeIndex: index \n    });\n  }\n\n  render() {\n    return (\n      <div className=\"slideshow\">\n        <ul className=\"slideshow-slides\">\n          {\n            this.props.slides.map((slide, index) => (\n              <li className={ classNames({ active: index == this.state.activeIndex }) }>\n                <figure>\n                  <img src={ slide.imageUrl } />\n                  { slide.caption ? <figcaption>{ slide.caption }</figcaption> : null }\n                </figure>\n              </li>\n            ))\n          }\n        </ul>\n        <ul className=\"slideshow-dots\">\n          {\n            this.props.slides.map((slide, index) => (\n              <li className={ (index == this.state.activeIndex) ? 'active': '' }>\n                <a onClick={ (event)=> this.jumpToSlide(index) }>{ index + 1 }</a>\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n    );\n  }\n}\n\nlet _slides = [{\n  imageUrl: \"https://i.ytimg.com/vi/MxwjEacvrtY/hqdefault.jpg\",\n  caption: \"Allan Allan Al Al Allan\",\n  delay : 4\n}, {\n  imageUrl: \"https://pbs.twimg.com/profile_images/2576554888/s8vftzr3j0a9r703xdfn.jpeg\",\n  caption: \"Steve Steve Steve\",\n  delay: 3\n}];\n\nclass App extends React.Component {\n  render() {\n    return <SlideShow slides={ _slides } />\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './slides.json'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}